#pragma once

#include <string>

extern "C"{
	#include <libavutil/pixfmt.h>
}

namespace Zuazo::Utils{

class PixelFormat{
public:
	constexpr PixelFormat();
	constexpr PixelFormat(AVPixelFormat fmt);
	PixelFormat(const std::string& name);
	PixelFormat(const PixelFormat& other)=default;
	~PixelFormat()=default;

	constexpr 				operator bool() const;
	constexpr int 			operator==(const PixelFormat& other) const;
	constexpr int 			operator!=(const PixelFormat& other) const;
	constexpr int 			operator<(const PixelFormat& other) const;
	constexpr int 			operator>(const PixelFormat& other) const;
	constexpr int 			operator<=(const PixelFormat& other) const;
	constexpr int 			operator>=(const PixelFormat& other) const;

	constexpr AVPixelFormat toAVPixelFormat() const;
	std::string 			getPixelFormatName() const;

	bool 					hasAlpha() const;
	bool 					isBigEndian() const;
	int 					getBitsPerPixel() const;
	int 					getPlanesCount();
	PixelFormat 			swapEndianness() const;
private:
	AVPixelFormat 			fmt;
};

constexpr PixelFormat::PixelFormat() :
		fmt(AV_PIX_FMT_NONE)
{
}

constexpr PixelFormat::PixelFormat(AVPixelFormat fmt) :
		fmt(fmt)
{
}

constexpr PixelFormat::operator bool() const{
	return fmt != AV_PIX_FMT_NONE;
}

constexpr int PixelFormat::operator==(const PixelFormat& other) const{
	return fmt==other.fmt;
}
constexpr int PixelFormat::operator!=(const PixelFormat& other) const{
	return fmt!=other.fmt;
}
constexpr int PixelFormat::operator<(const PixelFormat& other) const{
	return fmt<other.fmt;
}
constexpr int PixelFormat::operator>(const PixelFormat& other) const{
	return fmt>other.fmt;
}
constexpr int PixelFormat::operator<=(const PixelFormat& other) const{
	return fmt<=other.fmt;
}
constexpr int PixelFormat::operator>=(const PixelFormat& other) const{
	return fmt>=other.fmt;
}

constexpr AVPixelFormat PixelFormat::toAVPixelFormat() const{
	return fmt;
}

/**
 * @brief Pixel types supported by Zuazo
 *
 * @note This pixel formats have been borrowed (Ctrl + C, Ctrl + V) from libavutil/pixfmt.h
 * so they are equivalent to the respective AV_PIX_FMT_xxxxxxxx
 */

namespace PixelFormats{

@PIX_FMT_LIST@
}

@PIX_FMT_SUPPORT_DEFINITIONS@
}
